---
const typeColors = {
  info: ["", ""],
  success: ["#10b9811b", "#10b981"],
  error: ["", ""],
  warning: ["", ""],
  default: ["#0003", "var(--primary-light)"],
} as const;

interface Props {
  emoji?: string;
  title?: string;
  type?: "" | null | keyof typeof typeColors;
}
const hasIcon = Astro.slots.has("icon") || Astro.props.emoji != null;
const hasTitle = Astro.slots.has("title") || Astro.props.title != null;

const selectedColor = typeColors[Astro.props.type || "default"] ?? typeColors["default"];
---

<section>
  {
    (hasTitle || hasIcon) && (
      <header>
        <slot name="icon" />
        {Astro.props.emoji}
        {Astro.props.title}
        <slot name="title" />
      </header>
    )
  }

  <div>
    <slot />
  </div>
</section>

<style
  define:vars={{
    background: selectedColor[0],
    ["border-color"]: selectedColor[1],
  }}
>
  section {
    background: var(--background);
    border: solid 2px var(--border-color);
    border-radius: 10px;

    color: #eee;

    display: flex;
    flex-direction: column;

    padding: 1rem;

    font-size: 1rem;
  }

  header {
    font-weight: bold;
  }

  p {
    margin: 0;
  }
</style>
