#[allow(non_snake_case)]
pub mod Manifest {
    use std::{fs, io};

    use crate::optimized_tree::OptimizedTreeContainer;
    use crate::sky::CloudPlugin;
    use crate::utils::format_js;
    use crate::CompileContext;
    use densky_adapter::utils::join_paths;

    /// Generate TS code for this node and children
    fn build_node(id: u64, plugin: &CloudPlugin, container: &OptimizedTreeContainer) -> String {
        let node = container.nodes.get_reader(id).unwrap();

        let mut static_children = String::new();
        let mut children = String::new();

        for (pathname, id) in node.static_children.iter() {
            static_children.reserve_exact(pathname.len() + 13);
            static_children.push('"');
            static_children += pathname;
            static_children.push_str("\": () => {");
            static_children += &build_node(*id, plugin, container);
            static_children.push('}');
            static_children.push(',');
        }

        for (_, id) in node.dynamic_children.iter() {
            children += &build_node(*id, plugin, container);
        }

        let dynamic_child = if let Some((id, varname)) = node.dynamic.as_ref() {
            let mut child = container.nodes.get_writer(*id).unwrap();
            child.varname = Some(varname.clone());
            drop(child);

            build_node(*id, plugin, container)
        } else {
            String::new()
        };

        let leaf = node.into_leaf(container);
        // println!("{leaf:#?}");
        unsafe {
            plugin
                .cloud_optimized_tree_process(leaf, static_children, children, dynamic_child)
                .unwrap()
        }
    }

    /// Generate a manifest file from a container.
    fn build(plugin: &CloudPlugin, container: &OptimizedTreeContainer) -> String {
        let mut out: String = "
            // This file is generated by Densky-Framework
            // manifest.ts
            import * as $_Densky_Runtime_$ from \"densky/runtime.ts\";

            export default function resolve(req: $_Densky_Runtime_$.HTTPRequest): string | null {
            "
        .into();

        let root = build_node(container.get_root_id().unwrap(), plugin, &container);
        out.push_str(&root);

        out.push('}');
        format_js(&out)
    }

    /// Generate and write a manifest file from a container
    pub fn update(
        container: &OptimizedTreeContainer,
        plugin: &CloudPlugin,
        context: &CompileContext,
    ) -> io::Result<()> {
        let manifest = build(plugin, container);

        fs::write(join_paths("manifest.ts", &context.output_dir), manifest)
    }
}
