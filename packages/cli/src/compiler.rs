use std::{fs, io};

use densky_core::{
    densky_adapter::utils::join_paths,
    // http::{HttpLeaf, HttpTree},
    utils::import_filename,
    // views::ViewLeaf,
    // walker::{WalkerContainer, WalkerLeaf, WalkerTree},
    CompileContext,
    ConfigFile,
};
// use indicatif::ProgressBar;

pub fn write_aux_files(
    compile_context: &CompileContext,
    config_file: &ConfigFile,
) -> io::Result<()> {
    fs::create_dir_all(&compile_context.output_dir)?;

    let header = "// THIS FILE WAS GENERATED BY DENSKY-BACKEND (By Apika Luca)";
    // dev.ts
    fs::write(
        join_paths("dev.ts", &compile_context.output_dir),
        format!(
            "{header}
import {{ DevServer }} from \"densky/cloud.ts\";
import \"{config}\";
import \"{sky_load}\"

const server = new DevServer({{ port: 8000, verbose: true }});

server.start();
",
            config = import_filename("../config.ts"),
            sky_load = import_filename("./sky.load.ts")
        ),
    )?;

    let clouds = config_file
        .dependencies
        .values()
        .map(|cloud| format!("import \"densky/{}.ts\";", cloud.name))
        .collect::<Vec<String>>()
        .join("\n");

    // sky.load.ts
    fs::write(
        join_paths("sky.load.ts", &compile_context.output_dir),
        format!("{header}\n{clouds}"),
    )?;

    Ok(())
}
